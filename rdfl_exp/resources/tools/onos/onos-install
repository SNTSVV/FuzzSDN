#!/bin/bash
# -----------------------------------------------------------------------------
# Remotely pushes bits to a remote node and installs ONOS on it.
# -----------------------------------------------------------------------------

# ARG_OPTIONAL_BOOLEAN([force],[f],[forces uninstall of currently installed ONOS],[off])
# ARG_OPTIONAL_BOOLEAN([upstart],[u],[Install onos.conf upstart configuration file. This should be used on upstart-based systems.],[on])
# ARG_OPTIONAL_BOOLEAN([initd],[i],[Install /etc/init.d/onos script (also used by onos.conf)],[on])
# ARG_OPTIONAL_BOOLEAN([service],[s],[Install onos.service systemd configuration file],[on])
# ARG_OPTIONAL_BOOLEAN([start],[n],[Try to start onos.],[on])
# ARG_HELP([Remotely pushes bits to a remote node and installs ONOS on it.
# The -u should be used on upstart-based systems.
# If [node] is not specified the default target is \$OCI.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die() {
  local _ret="${2:-1}"
  test "${_PRINT_HELP:-no}" = yes && print_help >&2
  echo "$1" >&2
  exit "${_ret}"
}

begins_with_short_option() {
  local first_option all_short_options='fuisnh'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_force="off"
_arg_upstart="off"
_arg_initd="off"
_arg_service="off"
_arg_start="on"

print_help() {
  printf '%s\n' "Remotely pushes bits to a remote node and installs ONOS on it.
# The -u should be used on upstart-based systems.
# If [node] is not specified the default target is \$OCI."
  printf 'Usage: %s [-f|--(no-)force] [-u|--(no-)upstart] [-i|--(no-)initd] [-s|--(no-)service] [-n|--(no-)start] [-h|--help]\n' "$0"
  printf '\t%s\n' "-f, --force, --no-force: forces uninstall of currently installed ONOS (off by default)"
  printf '\t%s\n' "-u, --upstart, --no-upstart: Install onos.conf upstart configuration file. This should be used on upstart-based systems. (off by default)"
  printf '\t%s\n' "-i, --initd, --no-initd: Install /etc/initd.d/onos script (also used by onos.conf) (off by default)"
  printf '\t%s\n' "-s, --service, --no-service: Install onos.service systemd configuration file (off by default)"
  printf '\t%s\n' "-n, --start, --no-start: Try to start onos. (on by default)"
  printf '\t%s\n' "-h, --help: Prints help"
}

parse_commandline() {
  while test $# -gt 0; do
    _key="$1"
    case "$_key" in
    -f | --no-force | --force)
      _arg_force="on"
      test "${1:0:5}" = "--no-" && _arg_force="off"
      ;;
    -f*)
      _arg_force="on"
      _next="${_key##-f}"
      if test -n "$_next" -a "$_next" != "$_key"; then
        { begins_with_short_option "$_next" && shift && set -- "-f" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
      fi
      ;;
    -u | --no-upstart | --upstart)
      _arg_upstart="on"
      test "${1:0:5}" = "--no-" && _arg_upstart="off"
      ;;
    -u*)
      _arg_upstart="on"
      _next="${_key##-u}"
      if test -n "$_next" -a "$_next" != "$_key"; then
        { begins_with_short_option "$_next" && shift && set -- "-u" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
      fi
      ;;
    -i | --no-initd | --initd)
      _arg_init="on"
      test "${1:0:5}" = "--no-" && _arg_init="off"
      ;;
    -i*)
      _arg_init="on"
      _next="${_key##-i}"
      if test -n "$_next" -a "$_next" != "$_key"; then
        { begins_with_short_option "$_next" && shift && set -- "-i" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
      fi
      ;;
    -s | --no-service | --service)
      _arg_service="on"
      test "${1:0:5}" = "--no-" && _arg_service="off"
      ;;
    -s*)
      _arg_service="on"
      _next="${_key##-s}"
      if test -n "$_next" -a "$_next" != "$_key"; then
        { begins_with_short_option "$_next" && shift && set -- "-s" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
      fi
      ;;
    -n | --no-start | --start)
      _arg_start="on"
      test "${1:0:5}" = "--no-" && _arg_start="off"
      ;;
    -n*)
      _arg_start="on"
      _next="${_key##-n}"
      if test -n "$_next" -a "$_next" != "$_key"; then
        { begins_with_short_option "$_next" && shift && set -- "-n" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
      fi
      ;;
    -h | --help)
      print_help
      exit 0
      ;;
    -h*)
      print_help
      exit 0
      ;;
    *)
      _PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
      ;;
    esac
    shift
  done
}

parse_commandline "$@"
### END OF CODE GENERATED BY Argbash (sortof) ### ])

# Set up the flags
if [ $_arg_force == "on" ]; then uninstall=true; fi
if [ $_arg_upstart == "on" ]; then
  upstart=true
  initd=true
  sysd=true
fi
if [ $_arg_init == "on" ]; then
  initd=true
  sysd=true
fi
if [ $_arg_service == "on" ]; then sysd=true; fi
if [ $_arg_start == "on" ]; then start=true; fi

# move to script directory
cd "$(dirname "$0")" || exit
# Load onos-env script
source ./onos-env

# If the -f was given, attempt uninstall first.
if [ -d "$ONOS_INSTALL_DIR" ]; then
  if [ -n "$uninstall" ]; then
#    echo -n "Uninstalling ONOS... "
    (source ./onos-uninstall "${1:-$OCI}")
#    echo "done"
  else
    installed_version="$(cat "${ONOS_INSTALL_DIR}/VERSION")"
    echo "ONOS is already installed (version=${installed_version})"
    exit 0
  fi
fi


if ! id -u "$ONOS_USER" &>/dev/null; then
#  echo "Creating ${ONOS_USER}"
  sudo sudo adduser "$ONOS_USER" --system --group --shell /bin/bash
  sudo usermod -aG sudo "$ONOS_USER"
fi

# Download the tar directory
#echo -n "Downloading ONOS-${ONOS_VERSION}... "
wget --quiet "https://repo1.maven.org/maven2/org/onosproject/onos-releases/${ONOS_VERSION}/onos-${ONOS_VERSION}.tar.gz" -O "$ONOS_TAR"
#echo "done"

# Prepare the installation directory and
#echo -n "Installing ONOS-${ONOS_VERSION}... "
sudo mkdir -p "$ONOS_INSTALL_DIR"
sudo chown "${ONOS_USER}":"${ONOS_GROUP}" "$ONOS_INSTALL_DIR"
tar zxmf /"$ONOS_TAR" -C "$ONOS_INSTALL_DIR" --strip-components=1

# Make a link to the log file directory and make a home for auxiliaries
ln -s "${ONOS_INSTALL_DIR}/${KARAF_DIST}/data/log" /opt/onos/log
ln -s "${ONOS_INSTALL_DIR}/${KARAF_DIST}" /opt/onos/karaf
mkdir "${ONOS_INSTALL_DIR}/var"
mkdir "${ONOS_INSTALL_DIR}/config"
#echo "done"

# Install the configuration file(s) and set up options for debugging
#if [ -n "$upstart" ] || [ -n "$initd" ] || [ -n "$sysd" ]; then echo -n "Installing configuration file(s)... "; fi
if [ -n "$upstart" ]; then sudo cp "${ONOS_INSTALL_DIR}/init/onos.conf" /etc/init/onos.conf; fi
if [ -n "$initd" ]; then sudo cp "${ONOS_INSTALL_DIR}/init/onos.initd" /etc/init.d/onos; fi
if [ -n "$sysd" ]; then sudo cp "${ONOS_INSTALL_DIR}/init/onos.service" /etc/systemd/system/onos.service; fi
#if [ -n "$upstart" ] || [ -n "$initd" ] || [ -n "$sysd" ]; then echo "done"; fi

#echo -n "Configuring ONOS-${ONOS_VERSION}... "
# Set up correct user to run onos-service and debug options
echo "export ONOS_OPTS=debug" >"${ONOS_INSTALL_DIR}/options"
echo "export ONOS_USER=${ONOS_USER}" >>"${ONOS_INSTALL_DIR}/options"

# Remove any previous Open Networking Foundation bits from ~/.m2 repo.
rm -fr ~/.m2/repository/org/onosproject
if [ ! -z $mvn_settings ]; then
  cp /tmp/settings.xml ~/.m2/settings.xml
fi

# Drop log level for the console
echo 'log4j.logger.org.apache.sshd = WARN' >> "$ONOS_INSTALL_DIR/$KARAF_DIST/etc/org.ops4j.pax.logging.cfg"
# remove verbose bundle detail from log layout
echo 'log4j.appender.out.layout.ConversionPattern=%d{ISO8601} | %-5.5p | %-16.16t | %-32.32c{1} | %X{bundle.id} | %m%n' >> "${ONOS_INSTALL_DIR}/${KARAF_DIST}/etc/org.ops4j.pax.logging.cfg"

#echo "done"
# Set up and enable the ONOS service on systemd-based systems
if [ -n "$sysd" ]; then
#  echo -n "Enabling systemctl service... "
  sudo systemctl daemon-reload --quiet && (sudo systemctl enable onos.service --quiet || true)
#  echo "done"
fi

# Configure the ONOS installation
./onos-config localhost

# Upload the shared cluster key if present
#[ -f "$ONOS_CLUSTER_KEY_FILE" ] && onos-push-cluster-key $1

echo "ONOS is installed"

# Unless -n option was given, attempt to ignite the ONOS service.
if [ -n "$start" ]; then
 "$ONOS_INSTALL_DIR"/bin/onos-service localhost start || true
fi


