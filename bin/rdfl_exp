#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import grp
import logging
import os
import pwd
import signal
import sys
import traceback
from os.path import join

import weka.core.jvm as jvm

# Local dependencies
from rdfl_exp import config, core
from rdfl_exp.utils import file
from rdfl_exp.utils.terminal import Fore, Style


# ===== ( Setup functions ) ====================================================

def parse_arguments():
    """
    Parse the arguments passed to the program.
    """
    parser = argparse.ArgumentParser(description="Run a feedback loop experiment")

    parser.add_argument('--no-clean',
                        action='store_false',
                        help="Do not perform cleaning actions on exit")

    parser.add_argument('-i', '--input',
                        type=str,
                        dest='in_file',
                        help="Path to an input file")

    # Argument to choose the precision threshold
    parser.add_argument('--precision-threshold',
                        type=float,
                        dest='precision_th',
                        help="Override the precision threshold")

    # Argument to choose the recall threshold
    parser.add_argument('--recall-threshold',
                        type=float,
                        dest='recall_th',
                        help="Override the recall threshold")

    # Argument to choose the number of sample to generate
    parser.add_argument('-s', '--samples',
                        type=int,
                        dest='samples',
                        help="Override the number of samples")

    # Argument to choose the formatting method
    parser.add_argument('--data_format',
                        dest='data_format',
                        default='faf',
                        const='faf',
                        nargs='?',
                        choices=['faf', 'faf+dk', 'baf'],
                        help='Choose a data formatting method: FaF, FaF+DK or BaF (default: %(default)s)')






    return parser.parse_args()
# End def parse_arguments

# =====( Signals and cleanup functions )========================================


def cleanup(*args):
    """
    Clean up all file inside /var/run.
    """
    if config.CLEANUP is True:
        # Ensure the APP_DIR as the user's permissions
        uid = pwd.getpwnam(config.get_user()).pw_uid
        gid = grp.getgrnam(config.get_user()).gr_gid
        file.recursive_chown(config.RDFL_ROOT, uid, gid)

        # Clean the temporary directory
        config.tmp_dir(get_obj=True).cleanup()

        # Clean the run directory
        for filename in os.listdir(config.RUN_PATH):
            os.remove(join(config.RUN_PATH, filename))
        os.rmdir(config.RUN_PATH)

        # Check if the JVM is started and stop it otherwise
        if jvm.started:
            jvm.stop()

    # Exit with code 0
    sys.exit(0)
# End def cleanup


# ====== (Setup Function) =======================================================

def setup(args):
    """
    Setup the program
    """

    # Check that we have root permissions to run the program
    if os.geteuid() != 0:
        raise SystemExit(Fore.RED + Style.BOLD + "Error" + Style.RESET
                         + ": This program must be run with root permissions."
                         + " Try again using \"sudo\".")

    # Init the configuration
    config.init()

    # Assign the arguments
    config.CLEANUP = args.no_clean
# End def setup


# ====== (Main Function) =======================================================

if __name__ == '__main__':

    # Create cleanup signal
    for sig in (signal.SIGABRT, signal.SIGILL, signal.SIGINT, signal.SIGSEGV, signal.SIGTERM):
        signal.signal(sig, cleanup)

    # Create configuration reload signal
    # signal.signal(signal.SIGHUP, None)

    # parse arguments and run the setup
    args = parse_arguments()
    setup(args)

    try:
        jvm.logger.setLevel(logging.WARNING)
        jvm.start()  # Start the JVM
        core.init(args)
        core.run()
    except (Exception,):  # using '(Exception,)' instead of 'Exception' to trick PEP8
        print(traceback.format_exc())
    finally:
        jvm.stop()  # Close the JVM
        cleanup()   # Clean up the program
