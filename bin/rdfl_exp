#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import grp
import logging
import os
import pwd
import signal
import sys
import traceback
from os.path import join

import weka.core.jvm as jvm
import weka.core.packages as packages

# Local dependencies
from rdfl_exp import setup, core
from rdfl_exp.config import DEFAULT_CONFIG as CONFIG
from rdfl_exp.utils import file
from rdfl_exp.utils.terminal import Fore, Style


# ===== ( Setup functions ) ====================================================

def parse_arguments():
    """
    Parse the arguments passed to the program.
    """
    parser = argparse.ArgumentParser(description="Run a feedback loop experiment")

    parser.add_argument('--no-clean',
                        action='store_false',
                        help="Do not perform cleaning actions on exit")

    parser.add_argument('-i', '--input',
                        type=str,
                        dest='in_file',
                        help="Path to an input file")

    # Argument to choose the machine learning algorithm
    parser.add_argument('-M, --ml-algorithm',
                        type=str,
                        dest='ml_algorithm',
                        help="Select which machine algorithm to use")

    # Argument to choose the preprocessing strategy
    parser.add_argument('-P', '--preprocessing-strategy',
                        type=str,
                        dest='pp_strategy',
                        help="Select which preprocessing strategy to use")

    # Argument to choose disable the mutation of additional fields
    parser.add_argument('--disable-mutation',
                        action='store_false',
                        dest='enable_mutation',
                        help="Disable the mutation of additional fields upon rule application")

    # Argument to choose the mutation rate of additional fields
    parser.add_argument('--mutation-rate',
                        type=float,
                        default=1.0,
                        dest='mutation_rate',
                        help="Sets the mutation rate of additional fields upon rule application")

    # Argument to choose the number of sample to generate
    parser.add_argument('-s', '--samples',
                        type=int,
                        dest='samples',
                        help="Override the number of samples")

    # Argument to choose the formatting method
    parser.add_argument('--data-format',
                        dest='data_format',
                        default='faf',
                        const='faf',
                        nargs='?',
                        choices=['faf', 'faf+dk', 'baf'],
                        help='Choose a data formatting method: FaF, FaF+DK or BaF (default: %(default)s)')
    return parser.parse_args()
# End def parse_arguments

# =====( Signals and cleanup functions )========================================


def cleanup_app(*args):
    """
    Clean up all file inside /var/run.
    """
    if CONFIG.app.cleanup is True:
        # Ensure the cache, and data directories have the user's permissions
        uid = pwd.getpwnam(setup.get_user()).pw_uid
        gid = grp.getgrnam(setup.get_user()).gr_gid
        file.recursive_chown(setup.APP_DIRS.user_cache_dir, uid, gid)
        file.recursive_chown(setup.APP_DIRS.user_log_dir, uid, gid)
        file.recursive_chown(setup.APP_DIRS.user_data_dir, uid, gid)

        # Clean the temporary directory
        setup.tmp_dir(get_obj=True).cleanup()

        # Clean the pid file
        os.remove(join(setup.APP_DIRS.user_cache_dir, "rdfl_exp.pid"))

        # Check if the JVM is started and stop it otherwise
        if jvm.started:
            jvm.stop()

    # Exit with code 0
    sys.exit(0)
# End def cleanup


# ====== (Setup Function) =======================================================

def setup_app(args):
    """
    Setup the program
    """

    # Check that we have root permissions to run the program
    if os.geteuid() != 0:
        raise SystemExit(Fore.RED + Style.BOLD + "Error" + Style.RESET
                         + ": This program must be run with root permissions."
                         + " Try again using \"sudo\".")

    # Init the configuration
    setup.init()

    # Assign the arguments
    setup.CLEANUP = args.no_clean
# End def setup


# ====== (Main Function) =======================================================

if __name__ == '__main__':

    # Create cleanup signal
    for sig in (signal.SIGABRT, signal.SIGILL, signal.SIGINT, signal.SIGSEGV, signal.SIGTERM):
        signal.signal(sig, cleanup_app)

    # Create configuration reload signal
    # signal.signal(signal.SIGHUP, None)

    # parse arguments and run the setup
    args = parse_arguments()
    setup_app(args)

    try:
        jvm.logger.setLevel(logging.WARNING)
        jvm.start(packages=True)  # Start the JVM

        # Install the required packages if necessary
        print("Checking WEKA packages...", end=' ')
        new_pkg_installed = False
        if not packages.is_installed("SMOTE"):
            print("Installing weka package: \"SMOTE\" ...", end=' ')
            packages.install_package("SMOTE")
            new_pkg_installed = True
            print("done")

        if new_pkg_installed is True:
            print("Please restart {} to complete installation.".format(__name__))
            jvm.stop()
            sys.exit(0)

        print("done")

        # Run the core
        core.init(args)
        core.run()
    except (Exception,):  # using '(Exception,)' instead of 'Exception' to trick PEP8
        print(traceback.format_exc())
    finally:
        jvm.stop()  # Close the JVM
        cleanup_app()  # Clean up the program
